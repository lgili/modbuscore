name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-linux:
    name: Build on Linux
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON ..

    - name: Build
      run: |
        cd build
        cmake --build . -j$(nproc)

    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure --verbose

  build-macos:
    name: Build on macOS
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        brew install cmake

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON ..

    - name: Build
      run: |
        cd build
        cmake --build . -j$(sysctl -n hw.ncpu)

    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure --verbose

  build-windows:
    name: Build on Windows
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake -DBUILD_TESTING=ON ..

    - name: Build
      run: |
        cd build
        cmake --build . --config Debug

    - name: Run tests
      run: |
        cd build
        ctest -C Debug --output-on-failure --verbose

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-linux

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install pymodbus

    - name: Build ModbusCore
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON ..
        cmake --build .

    - name: Start Modbus server
      run: |
        cd tests
        python3 simple_tcp_server.py &
        echo $! > server.pid
        sleep 2

    - name: Run integration test
      run: |
        cd build/tests
        timeout 30s ./example_tcp_client_fc03 || exit_code=$?
        if [ ${exit_code:-0} -eq 0 ]; then
          echo "✓ Integration test passed"
        else
          echo "✗ Integration test failed with exit code $exit_code"
          exit 1
        fi

    - name: Stop Modbus server
      if: always()
      run: |
        if [ -f tests/server.pid ]; then
          kill $(cat tests/server.pid) || true
        fi

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install clang tooling
      run: |
        sudo apt-get update
        sudo apt-get install -y clang clang-format clang-tidy

    - name: Clang-format check
      run: |
        git ls-files '*.c' '*.h' | xargs clang-format --dry-run --Werror

    - name: Clang-tidy
      run: |
        mkdir build-clangtidy
        cd build-clangtidy
        cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=OFF -DCMAKE_C_CLANG_TIDY="clang-tidy;-warnings-as-errors=*" ..
        cmake --build . --target modbuscore

    - name: Check for Portuguese text in code
      run: |
        echo "Checking for Portuguese keywords in source files..."
        if find src include tests -name "*.c" -o -name "*.h" | xargs grep -l -E "(guardião|utilitário|ordem inversa|cenário)" 2>/dev/null; then
          echo "✗ Found Portuguese text in source files!"
          exit 1
        else
          echo "✓ All source files are in English"
        fi

    - name: Check documentation exists
      run: |
        required_docs=(
          "docs/index.md"
          "docs/architecture.md"
          "docs/quick-start.md"
          "docs/api/status.md"
          "docs/api/pdu.md"
          "docs/api/mbap.md"
          "docs/guides/testing.md"
          "docs/guides/troubleshooting.md"
          "README.md"
        )

        missing_docs=()
        for doc in "${required_docs[@]}"; do
          if [ ! -f "$doc" ]; then
            missing_docs+=("$doc")
          fi
        done

        if [ ${#missing_docs[@]} -eq 0 ]; then
          echo "✓ All required documentation files exist"
        else
          echo "✗ Missing documentation files:"
          printf '  - %s\n' "${missing_docs[@]}"
          exit 1
        fi

        rm -rf build-clangtidy

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows, integration-test, code-quality]
    if: always()

    steps:
    - name: Check build status
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Platform | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Linux | ${{ needs.build-linux.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| macOS | ${{ needs.build-macos.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Windows | ${{ needs.build-windows.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration | ${{ needs.integration-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
